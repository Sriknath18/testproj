using Azure.Storage.Blobs.Models;
using Azure.Storage.Blobs;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Azure.Functions.Worker;
using Microsoft.Extensions.Logging;
using PSVFunctionApp;
using System;
using System.ComponentModel.Design.Serialization;
using System.Text;
using System.Text.Json;
using FromBodyAttribute = Microsoft.Azure.Functions.Worker.Http.FromBodyAttribute;
using Microsoft.Extensions.Configuration;
using CsvHelper.Configuration;
using CsvHelper;
using System.Globalization;
using System.Collections;

namespace PSVFunctionApp2
{
    public class DeviationLogFunction
    {
        private readonly ILogger<DeviationLogFunction> _logger;

        private IConfiguration? config;
        private string Connectionstring = string.Empty;
        private string containername = string.Empty;
        // private static string blobName = "JAN/JAN_Deviation_log.psv";
        private static string fileHeader = "Date|StartTime|EndTime|Facility|Line|shift|RunType|SubArea|Cell|Unit|Deviation|Duration|Comments";

        public IConfiguration Configuration
        {
            set
            {
                this.config = value;
            }
            get
            {
                if (config == null)
                {
                    throw new Exception("configuration  is not initialized");
                }
                else
                {
                    return config;
                }
            }
        }

        public DeviationLogFunction()
        {

        }
        public DeviationLogFunction(ILogger<DeviationLogFunction> logger)
        {

            _logger = logger;

        }

        [Function("DeviationLogFunction")]
        public async Task<IActionResult> AddUpdateDeviationLogs([HttpTrigger(AuthorizationLevel.Anonymous, "post")] HttpRequest req, [FromBody] EnvDeviationLog envdeviationLog)
        {            
            try

            {
                string blobName = envdeviationLog?.deviationLog?.Facility + "/" + envdeviationLog?.deviationLog?.Facility + "_Deviation_log.psv";

                BlobContainerClient containerClient = null;
                if (envdeviationLog?.Environment == "Stage")
                {

                    SetConnectionDetails_Stage(out Connectionstring, out containername);
                    // Create a BlobServiceClient object
                    BlobServiceClient blobServiceClient = new BlobServiceClient(Connectionstring);
                    // Get the container client

                    containerClient = blobServiceClient.GetBlobContainerClient(containername);
                    // Get the blob client
                    //check blob
                    if (envdeviationLog?.deviationLog?.Facility != null)
                    {
                        await CreateFolderAndFileIfNotExists(containerClient, envdeviationLog?.deviationLog?.Facility);

                    }

                }
                else
                {
                    SetConnectionDetails_Dev(out Connectionstring, out containername);
                    // Create a BlobServiceClient object
                    BlobServiceClient blobServiceClient = new BlobServiceClient(Connectionstring);
                    // Get the container client

                    containerClient = blobServiceClient.GetBlobContainerClient(containername);
                    // Get the blob client
                    //check blob
                    if (envdeviationLog?.deviationLog?.Facility != null)
                    {
                        await CreateFolderAndFileIfNotExists(containerClient, envdeviationLog?.deviationLog?.Facility);

                    }
                }


                BlobClient blobClient = containerClient.GetBlobClient(blobName);
                // Download the blob content
                BlobDownloadInfo download = await blobClient.DownloadAsync();
                StringBuilder contentBuilder = new StringBuilder();
                using (StreamReader reader = new StreamReader(download.Content, Encoding.UTF8))
                {
                    contentBuilder.Append(await reader.ReadToEndAsync());
                }

                PSVDeviationLog pSVDeviationLog  = new PSVDeviationLog();
                var byteArray = pSVDeviationLog.UpdateAddRecord(contentBuilder, envdeviationLog?.deviationLog);

                using (MemoryStream memoryStream = new MemoryStream(byteArray))
                {
                    await blobClient.UploadAsync(memoryStream, overwrite: true);
                }
            }
            catch (System.Exception ex)
            {
                return new BadRequestObjectResult(ex.Message);
            }
            return new OkObjectResult("Sucessfully added/Updated the Request");
        }

        private void SetConnectionDetails_Stage(out string Connectionstring, out string containername)
        {
            var builder = new ConfigurationBuilder()
                    .AddJsonFile("appSettings.json");
            Configuration = builder.Build();

            Connectionstring = Configuration.GetSection("AzureStageSettings").GetSection("Connectionstring").Value;
            containername = Configuration.GetSection("AzureStageSettings").GetSection("Containername2").Value;


        }

        private void SetConnectionDetails_Dev(out string Connectionstring, out string containername)
        {
            var builder = new ConfigurationBuilder()
                    .AddJsonFile("appSettings.json");
            Configuration = builder.Build();
            Connectionstring = Configuration.GetSection("AzureDevSettings").GetSection("Connectionstring").Value;
            containername = Configuration.GetSection("AzureDevSettings").GetSection("Containername2").Value;


        }


        private async Task CreateFolderAndFileIfNotExists(BlobContainerClient? blobContainerClient, string? facility)
        {

            // POZ / POZ_Equipment.psv  blobname
            await blobContainerClient.CreateIfNotExistsAsync();

            //  string blobName = eq.facility + "/" + eq.facility + "_Equipment.psv";
            string blobName = facility + "/" + facility + "_Deviation_log.psv";

            // Check if the "folder" exists
            if (!await FolderExistsAsync(blobContainerClient, facility))
            {
                // Create a  blob to represent the folder
                BlobClient blobClient = blobContainerClient.GetBlobClient(blobName);
                await blobClient.UploadAsync(new BinaryData(fileHeader), overwrite: true);

                Console.WriteLine($"Folder '{facility}' created.");
            }
            else
            {
                Console.WriteLine($"Folder '{facility}' already exists.");
            }
            // Check if the file exists
            string filePath = blobName;
            BlobClient fileBlobClient = blobContainerClient.GetBlobClient(filePath);

            if (!await fileBlobClient.ExistsAsync())
            {
                // Create the file
                await fileBlobClient.UploadAsync(new BinaryData(fileHeader), overwrite: true);
                Console.WriteLine($"File '{filePath}' created in folder '{facility}'.");
            }
            else
            {
                Console.WriteLine($"File '{filePath}' already exists in folder '{facility}'.");
            }

        }

        private static async Task<bool> FolderExistsAsync(BlobContainerClient containerClient, string folderName)
        {
            await foreach (BlobItem blobItem in containerClient.GetBlobsAsync(prefix: folderName))
            {
                if (blobItem.Name.StartsWith(folderName))
                {
                    return true;
                }
            }
            return false;
        }

    }
}
