using Azure.Storage.Blobs.Models;
using Azure.Storage.Blobs;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Azure.Functions.Worker;
using Microsoft.Extensions.Logging;
using PSVFunctionApp;
using System;
using System.ComponentModel.Design.Serialization;
using System.Text;
using System.Text.Json;
using FromBodyAttribute = Microsoft.Azure.Functions.Worker.Http.FromBodyAttribute;
using Microsoft.Extensions.Configuration;
using CsvHelper.Configuration;
using CsvHelper;
using System.Globalization;
using System.Collections;
using System.Xml.Linq;
using System.Text.Json.Serialization;
using System.Net.Http.Json;
using static Azure.Core.HttpHeader;

namespace PSVFunctionApp2
{
    public class DailySchedularReadPSVToAPIFunction
    {
        private readonly ILogger<DailySchedularReadPSVToAPIFunction> _logger;

        private IConfiguration? config;
        private string Connectionstring = string.Empty;
        private string containername = string.Empty;
        private string containername2 = string.Empty;

        Uri uriEquipment = new Uri("https://prod-151.westus.logic.azure.com:443/workflows/2b5a66e976a44e3cab6d4efcf9a54628/triggers/manual/paths/invoke?api-version=2016-06-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=tiwfKzBqwwQLJ1KrpIhvfhcBKPW82Z-Keppx2-DIWiY");
        Uri urideviationlog = new Uri("https://prod-51.westus.logic.azure.com:443/workflows/cfba521552594bd6a981df87b232b3f5/triggers/manual/paths/invoke?api-version=2016-06-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=glxRkVjC1g5sdFR1EfXtBASxI28sIRp83Ct3H_ElrTU");
        Uri uriproductioncalender = new Uri("https://prod-151.westus.logic.azure.com:443/workflows/6a3fd47b0b3047659e11e2c78327d29c/triggers/manual/paths/invoke?api-version=2016-06-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=Gvxe5sZQlx66T61hV-zs3xEL3UJvOxbhPthrqEmez5w");
        Uri urilosscat = new Uri("https://prod-186.westus.logic.azure.com:443/workflows/940af621546b45b1b7f33299e98d8e47/triggers/manual/paths/invoke?api-version=2016-06-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=Mn2EEJPqhMxdQbq-M_IkhSmSjQtkqziUpztlaXWUzqo");
        Uri uritoc = new Uri("https://prod-175.westus.logic.azure.com:443/workflows/5f12608e27864553928c7de6be53de20/triggers/manual/paths/invoke?api-version=2016-06-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=p8Zr-WpKTzdsQd_kuIkxEgsU_6DvU2N7Le8I7ZXCbJk");
        Uri uritems = new Uri("https://prod-122.westus.logic.azure.com:443/workflows/78a25d69df964c50822e4112f5038da0/triggers/manual/paths/invoke?api-version=2016-06-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=Qqr4IjhCKLYAGt4fkDesuW4ATR-5TXPCGKn49oBEQW8");
        Uri urichangeover = new Uri("https://prod-156.westus.logic.azure.com:443/workflows/daac793f288f4bf0a1dad8db955f3fff/triggers/manual/paths/invoke?api-version=2016-06-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=mDyBh5LgCL1TBoavWjlSye9r3GDP9U8A3xcpDC1x2-Y");



        Uri urichangeoverstage = new Uri("https://prod-175.westus.logic.azure.com:443/workflows/39e25c4c20dd4cd889a8cac882406a44/triggers/manual/paths/invoke?api-version=2016-06-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=7H2o6Bw0Yqgo3MbrgUocaBPleWIlzKa-XvWDLD4uZ2A");
        Uri uriEquipstage = new Uri("https://prod-125.westus.logic.azure.com:443/workflows/78eb8dbde8284e029f6ba2d35d257876/triggers/manual/paths/invoke?api-version=2016-06-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=OfSTwfPcvBnJ30KG38wGNXjCsw8E9EdeONn3th59LGA");
        Uri uriitemsstage = new Uri("https://prod-122.westus.logic.azure.com:443/workflows/3943e696863b4fe8aecfde8ec9d70d2d/triggers/manual/paths/invoke?api-version=2016-06-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=cdiOTgoJDiHIMyGjgsfInJU8itwnrWV6P0B95ZbIx8g");
        Uri uritocstage = new Uri("https://prod-189.westus.logic.azure.com:443/workflows/6541e46919494f13ab84f14b1180d8eb/triggers/manual/paths/invoke?api-version=2016-06-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=qjoYWAyzBdlfV6-Kym2DzxgGiMJIxrkdCW9pEhZwTZA");
        Uri urideviationlogstage = new Uri("https://prod-54.westus.logic.azure.com:443/workflows/72015d28adec4709a4ef31c8f44e4866/triggers/manual/paths/invoke?api-version=2016-06-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=3X7BnIvtZYBQhDVnU7rr4jC7qPxK6uanVDB3uFKgttw");
        Uri uriprodcalenderstage = new Uri("https://prod-94.westus.logic.azure.com:443/workflows/c47275a5818a491f982719016f345316/triggers/manual/paths/invoke?api-version=2016-06-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=l9UICh6q-yL5ll5InFhbA4202ZFbOBCrV_9D_JiB9i8");
        Uri urilosscatstage = new Uri("https://prod-90.westus.logic.azure.com:443/workflows/e585e8da66a54578a8c03c4d45acbb69/triggers/manual/paths/invoke?api-version=2016-06-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=fBVRDOR2SGnaEDUwggDdszD-HBN8Gzpudn_hnHtfO74");


        public IConfiguration Configuration
        {
            set
            {
                this.config = value;
            }
            get
            {
                if (config == null)
                {
                    throw new Exception("configuration  is not initialized");
                }
                else
                {
                    return config;
                }
            }
        }

      
        public DailySchedularReadPSVToAPIFunction(ILogger<DailySchedularReadPSVToAPIFunction> logger)
        {

            _logger = logger;

        }

        [Function("DailySchedularReadPSVToAPIFunction")]

        public async Task<IActionResult> ConvertPSVDatatoJsonAPI([HttpTrigger(AuthorizationLevel.Anonymous, "get")] HttpRequest req)
        {
            string blobName = string.Empty;
            // public void Run([TimerTrigger("0 00 12 * * *")] TimerInfo myTimer)
            try
            {

                SetConnectionDetails(out Connectionstring, out containername, out containername2);
                // Create a BlobServiceClient object
                BlobServiceClient blobServiceClient = new BlobServiceClient(Connectionstring);
                // Get the container client
                BlobContainerClient containerClient = blobServiceClient.GetBlobContainerClient(containername);

                 var allblobs =  await FindblobsAsync(containerClient);

                
                // Get the blob client
                foreach (var item in allblobs)
                {
                    await ReadPSV(containerClient, item);
                    await Task.Delay(15000);
                }
                // Manual entry container

                BlobServiceClient blobServiceClientmanualentry = new BlobServiceClient(Connectionstring);
                // Get the container client
                BlobContainerClient containerClientmanualentry = blobServiceClient.GetBlobContainerClient(containername2);

                var allblobsmanualentry = await FindblobsAsync(containerClientmanualentry);


                // Get the blob client
                foreach (var item in allblobsmanualentry)
                {
                    await ReadPSV(containerClientmanualentry, item);
                     await Task.Delay(15000);
                }


                //await Parallel.ForEachAsync(allblobs, new ParallelOptions { MaxDegreeOfParallelism = 3 }, async (blobname, token) =>
                //{
                //   await ReadPSV(containerClient, blobname);
                //  // await Task.Delay(5000, token);
                //});



            }
            catch (Exception ex)
            {
                return new BadRequestObjectResult(ex.Message);
            }
            return new OkObjectResult("Sucessfully added/Updated the Request");
        }

        private void SetConnectionDetails(out string Connectionstring, out string containername, out string containername2)
        {
            var builder = new ConfigurationBuilder()
                    .AddJsonFile("appSettings.json");
            Configuration = builder.Build();

            Connectionstring = Configuration.GetSection("AzureDevSettings").GetSection("Connectionstring").Value;
            containername = Configuration.GetSection("AzureDevSettings").GetSection("Containername").Value;
            containername2= Configuration.GetSection("AzureDevSettings").GetSection("Containername2").Value;


        }

        private static async Task<List<string>> FindblobsAsync(BlobContainerClient containerClient)
        {
            List<string> blobs = new List<string>();    
            await foreach (BlobItem blobItem in containerClient.GetBlobsAsync())
            {
                 var foldername = blobItem.Name;
                blobs.Add(foldername);
            }
            return blobs;
        }


        private  async Task ReadPSV(BlobContainerClient containerClient,string bname)
        {
            try
            {
                BlobClient blobClient = containerClient.GetBlobClient(bname);
                // Download the blob content
                BlobDownloadInfo download = await blobClient.DownloadAsync();
                var config = new CsvConfiguration(CultureInfo.InvariantCulture)
                {
                    Delimiter = "|",
                    HeaderValidated = null,
                    MissingFieldFound = null,

                };
                using (StreamReader reader = new StreamReader(download.Content))
                using (var csv = new CsvReader(reader, config))
                using (HttpClient httpClient = new HttpClient())
                {

                    if (bname.Contains("Equipment.psv"))
                    {
                        var records = csv.GetRecords<Equipment>();
                        var jsondata = JsonSerializer.Serialize(records);
                        var content = new StringContent(jsondata, Encoding.UTF8, "application/json");
                        var response = await httpClient.PostAsync(uriEquipment, content);
                        response.EnsureSuccessStatusCode();

                    }
                    else if (bname.Contains("Deviation_log.psv"))
                    {
                        var records = csv.GetRecords<DeviationLog>();
                        var jsondata = JsonSerializer.Serialize(records);
                        var content = new StringContent(jsondata, Encoding.UTF8, "application/json");
                        var response = await httpClient.PostAsync(urideviationlog, content);
                        response.EnsureSuccessStatusCode();

                    }
                    else if (bname.Contains("Items.psv"))
                    {
                        var records = csv.GetRecords<Item>();
                        var jsondata = JsonSerializer.Serialize(records);
                        var content = new StringContent(jsondata, Encoding.UTF8, "application/json");
                        var response = await httpClient.PostAsync(uritems, content);
                        response.EnsureSuccessStatusCode();

                    }
                    else if (bname.Contains("TOC.psv"))
                    {
                        var records = csv.GetRecords<Toc>();
                        var jsondata = JsonSerializer.Serialize(records);
                        var content = new StringContent(jsondata, Encoding.UTF8, "application/json");
                        var response = await httpClient.PostAsync(uritoc, content);
                        response.EnsureSuccessStatusCode();

                    }


                    else if (bname.Contains("Changeover.psv"))
                    {
                        var records = csv.GetRecords<ChangeOver>();
                        var jsondata = JsonSerializer.Serialize(records);
                        var content = new StringContent(jsondata, Encoding.UTF8, "application/json");
                        var response = await httpClient.PostAsync(urichangeover, content);
                        response.EnsureSuccessStatusCode();


                    }
                    else if (bname.Contains("Loss_Categories.psv"))
                    {
                        var records = csv.GetRecords<LossCategories>();
                        var jsondata = JsonSerializer.Serialize(records);
                        var content = new StringContent(jsondata, Encoding.UTF8, "application/json");
                        var response = await httpClient.PostAsync(urilosscat, content);
                        response.EnsureSuccessStatusCode();

                    }
                    else if (bname.Contains("Production_Calendar.psv"))
                    {
                        var records = csv.GetRecords<ProductionCalender>();
                        var jsondata = JsonSerializer.Serialize(records);
                        var content = new StringContent(jsondata, Encoding.UTF8, "application/json");
                        var response = await httpClient.PostAsync(uriproductioncalender, content);
                        response.EnsureSuccessStatusCode();



                    }
                }
            }
            catch(Exception ex) 
            {

                throw;
            }

            }


    }
}
